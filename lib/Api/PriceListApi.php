<?php
/**
 * PriceListApi
 * PHP version 7.4
 *
 * @category Class
 * @package  GeminiCommerce\Pricelist
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * pricelist/service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GeminiCommerce\Pricelist\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GeminiCommerce\Pricelist\ApiException;
use GeminiCommerce\Pricelist\Configuration;
use GeminiCommerce\Pricelist\HeaderSelector;
use GeminiCommerce\Pricelist\ObjectSerializer;

/**
 * PriceListApi Class Doc Comment
 *
 * @category Class
 * @package  GeminiCommerce\Pricelist
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PriceListApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'priceListCreatePriceList' => [
            'application/json',
        ],
        'priceListDeletePriceListItems' => [
            'application/json',
        ],
        'priceListGetFullPriceItemsByPricelistId' => [
            'application/json',
        ],
        'priceListGetPriceItemsByPriceListItemIds' => [
            'application/json',
        ],
        'priceListGetPriceList' => [
            'application/json',
        ],
        'priceListGetPriceListByCode' => [
            'application/json',
        ],
        'priceListGetPriceListItems' => [
            'application/json',
        ],
        'priceListGetPricesItems' => [
            'application/json',
        ],
        'priceListListFullPriceItemsByPricelistId' => [
            'application/json',
        ],
        'priceListListPriceLists' => [
            'application/json',
        ],
        'priceListSetPriceListItems' => [
            'application/json',
        ],
        'priceListUpdatePriceList' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation priceListCreatePriceList
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistCreatePriceListRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListCreatePriceList'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\Pricelist\Model\PricelistCreatePriceListResponse|\GeminiCommerce\Pricelist\Model\RpcStatus
     */
    public function priceListCreatePriceList($body, string $contentType = self::contentTypes['priceListCreatePriceList'][0])
    {
        list($response) = $this->priceListCreatePriceListWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation priceListCreatePriceListWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistCreatePriceListRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListCreatePriceList'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\Pricelist\Model\PricelistCreatePriceListResponse|\GeminiCommerce\Pricelist\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function priceListCreatePriceListWithHttpInfo($body, string $contentType = self::contentTypes['priceListCreatePriceList'][0])
    {
        $request = $this->priceListCreatePriceListRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\Pricelist\Model\PricelistCreatePriceListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\PricelistCreatePriceListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\PricelistCreatePriceListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\Pricelist\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\Pricelist\Model\PricelistCreatePriceListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\PricelistCreatePriceListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation priceListCreatePriceListAsync
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistCreatePriceListRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListCreatePriceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListCreatePriceListAsync($body, string $contentType = self::contentTypes['priceListCreatePriceList'][0])
    {
        return $this->priceListCreatePriceListAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation priceListCreatePriceListAsyncWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistCreatePriceListRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListCreatePriceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListCreatePriceListAsyncWithHttpInfo($body, string $contentType = self::contentTypes['priceListCreatePriceList'][0])
    {
        $returnType = '\GeminiCommerce\Pricelist\Model\PricelistCreatePriceListResponse';
        $request = $this->priceListCreatePriceListRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'priceListCreatePriceList'
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistCreatePriceListRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListCreatePriceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function priceListCreatePriceListRequest($body, string $contentType = self::contentTypes['priceListCreatePriceList'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling priceListCreatePriceList'
            );
        }


        $resourcePath = '/pricelist.PriceList/CreatePriceList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation priceListDeletePriceListItems
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistDeletePriceListItemsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListDeletePriceListItems'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\GeminiCommerce\Pricelist\Model\RpcStatus
     */
    public function priceListDeletePriceListItems($body, string $contentType = self::contentTypes['priceListDeletePriceListItems'][0])
    {
        list($response) = $this->priceListDeletePriceListItemsWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation priceListDeletePriceListItemsWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistDeletePriceListItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListDeletePriceListItems'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\GeminiCommerce\Pricelist\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function priceListDeletePriceListItemsWithHttpInfo($body, string $contentType = self::contentTypes['priceListDeletePriceListItems'][0])
    {
        $request = $this->priceListDeletePriceListItemsRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\Pricelist\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation priceListDeletePriceListItemsAsync
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistDeletePriceListItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListDeletePriceListItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListDeletePriceListItemsAsync($body, string $contentType = self::contentTypes['priceListDeletePriceListItems'][0])
    {
        return $this->priceListDeletePriceListItemsAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation priceListDeletePriceListItemsAsyncWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistDeletePriceListItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListDeletePriceListItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListDeletePriceListItemsAsyncWithHttpInfo($body, string $contentType = self::contentTypes['priceListDeletePriceListItems'][0])
    {
        $returnType = 'object';
        $request = $this->priceListDeletePriceListItemsRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'priceListDeletePriceListItems'
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistDeletePriceListItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListDeletePriceListItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function priceListDeletePriceListItemsRequest($body, string $contentType = self::contentTypes['priceListDeletePriceListItems'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling priceListDeletePriceListItems'
            );
        }


        $resourcePath = '/pricelist.PriceList/DeletePriceListItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation priceListGetFullPriceItemsByPricelistId
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetFullPriceItemsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetFullPriceItemsByPricelistId'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\Pricelist\Model\PricelistGetFullPriceItemsResponse|\GeminiCommerce\Pricelist\Model\RpcStatus
     */
    public function priceListGetFullPriceItemsByPricelistId($body, string $contentType = self::contentTypes['priceListGetFullPriceItemsByPricelistId'][0])
    {
        list($response) = $this->priceListGetFullPriceItemsByPricelistIdWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation priceListGetFullPriceItemsByPricelistIdWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetFullPriceItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetFullPriceItemsByPricelistId'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\Pricelist\Model\PricelistGetFullPriceItemsResponse|\GeminiCommerce\Pricelist\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function priceListGetFullPriceItemsByPricelistIdWithHttpInfo($body, string $contentType = self::contentTypes['priceListGetFullPriceItemsByPricelistId'][0])
    {
        $request = $this->priceListGetFullPriceItemsByPricelistIdRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\Pricelist\Model\PricelistGetFullPriceItemsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\PricelistGetFullPriceItemsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\PricelistGetFullPriceItemsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\Pricelist\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\Pricelist\Model\PricelistGetFullPriceItemsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\PricelistGetFullPriceItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation priceListGetFullPriceItemsByPricelistIdAsync
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetFullPriceItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetFullPriceItemsByPricelistId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListGetFullPriceItemsByPricelistIdAsync($body, string $contentType = self::contentTypes['priceListGetFullPriceItemsByPricelistId'][0])
    {
        return $this->priceListGetFullPriceItemsByPricelistIdAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation priceListGetFullPriceItemsByPricelistIdAsyncWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetFullPriceItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetFullPriceItemsByPricelistId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListGetFullPriceItemsByPricelistIdAsyncWithHttpInfo($body, string $contentType = self::contentTypes['priceListGetFullPriceItemsByPricelistId'][0])
    {
        $returnType = '\GeminiCommerce\Pricelist\Model\PricelistGetFullPriceItemsResponse';
        $request = $this->priceListGetFullPriceItemsByPricelistIdRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'priceListGetFullPriceItemsByPricelistId'
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetFullPriceItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetFullPriceItemsByPricelistId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function priceListGetFullPriceItemsByPricelistIdRequest($body, string $contentType = self::contentTypes['priceListGetFullPriceItemsByPricelistId'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling priceListGetFullPriceItemsByPricelistId'
            );
        }


        $resourcePath = '/pricelist.PriceList/GetFullPriceItemsByPricelistId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation priceListGetPriceItemsByPriceListItemIds
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceItemsByPriceListItemIdsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceItemsByPriceListItemIds'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\Pricelist\Model\PricelistGetPriceItemsByPriceListItemIdsResponse|\GeminiCommerce\Pricelist\Model\RpcStatus
     */
    public function priceListGetPriceItemsByPriceListItemIds($body, string $contentType = self::contentTypes['priceListGetPriceItemsByPriceListItemIds'][0])
    {
        list($response) = $this->priceListGetPriceItemsByPriceListItemIdsWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation priceListGetPriceItemsByPriceListItemIdsWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceItemsByPriceListItemIdsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceItemsByPriceListItemIds'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\Pricelist\Model\PricelistGetPriceItemsByPriceListItemIdsResponse|\GeminiCommerce\Pricelist\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function priceListGetPriceItemsByPriceListItemIdsWithHttpInfo($body, string $contentType = self::contentTypes['priceListGetPriceItemsByPriceListItemIds'][0])
    {
        $request = $this->priceListGetPriceItemsByPriceListItemIdsRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\Pricelist\Model\PricelistGetPriceItemsByPriceListItemIdsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\PricelistGetPriceItemsByPriceListItemIdsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\PricelistGetPriceItemsByPriceListItemIdsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\Pricelist\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\Pricelist\Model\PricelistGetPriceItemsByPriceListItemIdsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\PricelistGetPriceItemsByPriceListItemIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation priceListGetPriceItemsByPriceListItemIdsAsync
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceItemsByPriceListItemIdsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceItemsByPriceListItemIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListGetPriceItemsByPriceListItemIdsAsync($body, string $contentType = self::contentTypes['priceListGetPriceItemsByPriceListItemIds'][0])
    {
        return $this->priceListGetPriceItemsByPriceListItemIdsAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation priceListGetPriceItemsByPriceListItemIdsAsyncWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceItemsByPriceListItemIdsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceItemsByPriceListItemIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListGetPriceItemsByPriceListItemIdsAsyncWithHttpInfo($body, string $contentType = self::contentTypes['priceListGetPriceItemsByPriceListItemIds'][0])
    {
        $returnType = '\GeminiCommerce\Pricelist\Model\PricelistGetPriceItemsByPriceListItemIdsResponse';
        $request = $this->priceListGetPriceItemsByPriceListItemIdsRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'priceListGetPriceItemsByPriceListItemIds'
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceItemsByPriceListItemIdsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceItemsByPriceListItemIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function priceListGetPriceItemsByPriceListItemIdsRequest($body, string $contentType = self::contentTypes['priceListGetPriceItemsByPriceListItemIds'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling priceListGetPriceItemsByPriceListItemIds'
            );
        }


        $resourcePath = '/pricelist.PriceList/GetPriceItemsByPriceListItemIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation priceListGetPriceList
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceList'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\Pricelist\Model\PricelistGetPriceListResponse|\GeminiCommerce\Pricelist\Model\RpcStatus
     */
    public function priceListGetPriceList($body, string $contentType = self::contentTypes['priceListGetPriceList'][0])
    {
        list($response) = $this->priceListGetPriceListWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation priceListGetPriceListWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceList'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\Pricelist\Model\PricelistGetPriceListResponse|\GeminiCommerce\Pricelist\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function priceListGetPriceListWithHttpInfo($body, string $contentType = self::contentTypes['priceListGetPriceList'][0])
    {
        $request = $this->priceListGetPriceListRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\Pricelist\Model\PricelistGetPriceListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\PricelistGetPriceListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\PricelistGetPriceListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\Pricelist\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\Pricelist\Model\PricelistGetPriceListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\PricelistGetPriceListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation priceListGetPriceListAsync
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListGetPriceListAsync($body, string $contentType = self::contentTypes['priceListGetPriceList'][0])
    {
        return $this->priceListGetPriceListAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation priceListGetPriceListAsyncWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListGetPriceListAsyncWithHttpInfo($body, string $contentType = self::contentTypes['priceListGetPriceList'][0])
    {
        $returnType = '\GeminiCommerce\Pricelist\Model\PricelistGetPriceListResponse';
        $request = $this->priceListGetPriceListRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'priceListGetPriceList'
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function priceListGetPriceListRequest($body, string $contentType = self::contentTypes['priceListGetPriceList'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling priceListGetPriceList'
            );
        }


        $resourcePath = '/pricelist.PriceList/GetPriceList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation priceListGetPriceListByCode
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListByCodeRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceListByCode'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\Pricelist\Model\PricelistGetPriceListByCodeResponse|\GeminiCommerce\Pricelist\Model\RpcStatus
     */
    public function priceListGetPriceListByCode($body, string $contentType = self::contentTypes['priceListGetPriceListByCode'][0])
    {
        list($response) = $this->priceListGetPriceListByCodeWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation priceListGetPriceListByCodeWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListByCodeRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceListByCode'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\Pricelist\Model\PricelistGetPriceListByCodeResponse|\GeminiCommerce\Pricelist\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function priceListGetPriceListByCodeWithHttpInfo($body, string $contentType = self::contentTypes['priceListGetPriceListByCode'][0])
    {
        $request = $this->priceListGetPriceListByCodeRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\Pricelist\Model\PricelistGetPriceListByCodeResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\PricelistGetPriceListByCodeResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\PricelistGetPriceListByCodeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\Pricelist\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\Pricelist\Model\PricelistGetPriceListByCodeResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\PricelistGetPriceListByCodeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation priceListGetPriceListByCodeAsync
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListByCodeRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceListByCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListGetPriceListByCodeAsync($body, string $contentType = self::contentTypes['priceListGetPriceListByCode'][0])
    {
        return $this->priceListGetPriceListByCodeAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation priceListGetPriceListByCodeAsyncWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListByCodeRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceListByCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListGetPriceListByCodeAsyncWithHttpInfo($body, string $contentType = self::contentTypes['priceListGetPriceListByCode'][0])
    {
        $returnType = '\GeminiCommerce\Pricelist\Model\PricelistGetPriceListByCodeResponse';
        $request = $this->priceListGetPriceListByCodeRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'priceListGetPriceListByCode'
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListByCodeRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceListByCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function priceListGetPriceListByCodeRequest($body, string $contentType = self::contentTypes['priceListGetPriceListByCode'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling priceListGetPriceListByCode'
            );
        }


        $resourcePath = '/pricelist.PriceList/GetPriceListByCode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation priceListGetPriceListItems
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListItemsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceListItems'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\Pricelist\Model\PricelistGetPriceListItemsResponse|\GeminiCommerce\Pricelist\Model\RpcStatus
     */
    public function priceListGetPriceListItems($body, string $contentType = self::contentTypes['priceListGetPriceListItems'][0])
    {
        list($response) = $this->priceListGetPriceListItemsWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation priceListGetPriceListItemsWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceListItems'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\Pricelist\Model\PricelistGetPriceListItemsResponse|\GeminiCommerce\Pricelist\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function priceListGetPriceListItemsWithHttpInfo($body, string $contentType = self::contentTypes['priceListGetPriceListItems'][0])
    {
        $request = $this->priceListGetPriceListItemsRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\Pricelist\Model\PricelistGetPriceListItemsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\PricelistGetPriceListItemsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\PricelistGetPriceListItemsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\Pricelist\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\Pricelist\Model\PricelistGetPriceListItemsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\PricelistGetPriceListItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation priceListGetPriceListItemsAsync
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceListItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListGetPriceListItemsAsync($body, string $contentType = self::contentTypes['priceListGetPriceListItems'][0])
    {
        return $this->priceListGetPriceListItemsAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation priceListGetPriceListItemsAsyncWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceListItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListGetPriceListItemsAsyncWithHttpInfo($body, string $contentType = self::contentTypes['priceListGetPriceListItems'][0])
    {
        $returnType = '\GeminiCommerce\Pricelist\Model\PricelistGetPriceListItemsResponse';
        $request = $this->priceListGetPriceListItemsRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'priceListGetPriceListItems'
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPriceListItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPriceListItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function priceListGetPriceListItemsRequest($body, string $contentType = self::contentTypes['priceListGetPriceListItems'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling priceListGetPriceListItems'
            );
        }


        $resourcePath = '/pricelist.PriceList/GetPriceListItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation priceListGetPricesItems
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPricesRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPricesItems'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\Pricelist\Model\PricelistGetPricesResponse|\GeminiCommerce\Pricelist\Model\RpcStatus
     */
    public function priceListGetPricesItems($body, string $contentType = self::contentTypes['priceListGetPricesItems'][0])
    {
        list($response) = $this->priceListGetPricesItemsWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation priceListGetPricesItemsWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPricesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPricesItems'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\Pricelist\Model\PricelistGetPricesResponse|\GeminiCommerce\Pricelist\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function priceListGetPricesItemsWithHttpInfo($body, string $contentType = self::contentTypes['priceListGetPricesItems'][0])
    {
        $request = $this->priceListGetPricesItemsRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\Pricelist\Model\PricelistGetPricesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\PricelistGetPricesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\PricelistGetPricesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\Pricelist\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\Pricelist\Model\PricelistGetPricesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\PricelistGetPricesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation priceListGetPricesItemsAsync
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPricesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPricesItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListGetPricesItemsAsync($body, string $contentType = self::contentTypes['priceListGetPricesItems'][0])
    {
        return $this->priceListGetPricesItemsAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation priceListGetPricesItemsAsyncWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPricesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPricesItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListGetPricesItemsAsyncWithHttpInfo($body, string $contentType = self::contentTypes['priceListGetPricesItems'][0])
    {
        $returnType = '\GeminiCommerce\Pricelist\Model\PricelistGetPricesResponse';
        $request = $this->priceListGetPricesItemsRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'priceListGetPricesItems'
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistGetPricesRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListGetPricesItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function priceListGetPricesItemsRequest($body, string $contentType = self::contentTypes['priceListGetPricesItems'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling priceListGetPricesItems'
            );
        }


        $resourcePath = '/pricelist.PriceList/GetPricesItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation priceListListFullPriceItemsByPricelistId
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistListFullPriceItemsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListListFullPriceItemsByPricelistId'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\Pricelist\Model\PricelistListFullPriceItemsResponse|\GeminiCommerce\Pricelist\Model\RpcStatus
     */
    public function priceListListFullPriceItemsByPricelistId($body, string $contentType = self::contentTypes['priceListListFullPriceItemsByPricelistId'][0])
    {
        list($response) = $this->priceListListFullPriceItemsByPricelistIdWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation priceListListFullPriceItemsByPricelistIdWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistListFullPriceItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListListFullPriceItemsByPricelistId'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\Pricelist\Model\PricelistListFullPriceItemsResponse|\GeminiCommerce\Pricelist\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function priceListListFullPriceItemsByPricelistIdWithHttpInfo($body, string $contentType = self::contentTypes['priceListListFullPriceItemsByPricelistId'][0])
    {
        $request = $this->priceListListFullPriceItemsByPricelistIdRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\Pricelist\Model\PricelistListFullPriceItemsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\PricelistListFullPriceItemsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\PricelistListFullPriceItemsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\Pricelist\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\Pricelist\Model\PricelistListFullPriceItemsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\PricelistListFullPriceItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation priceListListFullPriceItemsByPricelistIdAsync
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistListFullPriceItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListListFullPriceItemsByPricelistId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListListFullPriceItemsByPricelistIdAsync($body, string $contentType = self::contentTypes['priceListListFullPriceItemsByPricelistId'][0])
    {
        return $this->priceListListFullPriceItemsByPricelistIdAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation priceListListFullPriceItemsByPricelistIdAsyncWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistListFullPriceItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListListFullPriceItemsByPricelistId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListListFullPriceItemsByPricelistIdAsyncWithHttpInfo($body, string $contentType = self::contentTypes['priceListListFullPriceItemsByPricelistId'][0])
    {
        $returnType = '\GeminiCommerce\Pricelist\Model\PricelistListFullPriceItemsResponse';
        $request = $this->priceListListFullPriceItemsByPricelistIdRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'priceListListFullPriceItemsByPricelistId'
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistListFullPriceItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListListFullPriceItemsByPricelistId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function priceListListFullPriceItemsByPricelistIdRequest($body, string $contentType = self::contentTypes['priceListListFullPriceItemsByPricelistId'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling priceListListFullPriceItemsByPricelistId'
            );
        }


        $resourcePath = '/pricelist.PriceList/ListFullPriceItemsByPricelistId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation priceListListPriceLists
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistListPriceListsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListListPriceLists'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\Pricelist\Model\PricelistListPriceListsResponse|\GeminiCommerce\Pricelist\Model\RpcStatus
     */
    public function priceListListPriceLists($body, string $contentType = self::contentTypes['priceListListPriceLists'][0])
    {
        list($response) = $this->priceListListPriceListsWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation priceListListPriceListsWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistListPriceListsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListListPriceLists'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\Pricelist\Model\PricelistListPriceListsResponse|\GeminiCommerce\Pricelist\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function priceListListPriceListsWithHttpInfo($body, string $contentType = self::contentTypes['priceListListPriceLists'][0])
    {
        $request = $this->priceListListPriceListsRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\Pricelist\Model\PricelistListPriceListsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\PricelistListPriceListsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\PricelistListPriceListsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\Pricelist\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\Pricelist\Model\PricelistListPriceListsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\PricelistListPriceListsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation priceListListPriceListsAsync
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistListPriceListsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListListPriceLists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListListPriceListsAsync($body, string $contentType = self::contentTypes['priceListListPriceLists'][0])
    {
        return $this->priceListListPriceListsAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation priceListListPriceListsAsyncWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistListPriceListsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListListPriceLists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListListPriceListsAsyncWithHttpInfo($body, string $contentType = self::contentTypes['priceListListPriceLists'][0])
    {
        $returnType = '\GeminiCommerce\Pricelist\Model\PricelistListPriceListsResponse';
        $request = $this->priceListListPriceListsRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'priceListListPriceLists'
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistListPriceListsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListListPriceLists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function priceListListPriceListsRequest($body, string $contentType = self::contentTypes['priceListListPriceLists'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling priceListListPriceLists'
            );
        }


        $resourcePath = '/pricelist.PriceList/ListPriceLists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation priceListSetPriceListItems
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistSetPriceListItemsRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListSetPriceListItems'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \GeminiCommerce\Pricelist\Model\PricelistSetPriceListItemsResponse|\GeminiCommerce\Pricelist\Model\RpcStatus
     */
    public function priceListSetPriceListItems($body, string $contentType = self::contentTypes['priceListSetPriceListItems'][0])
    {
        list($response) = $this->priceListSetPriceListItemsWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation priceListSetPriceListItemsWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistSetPriceListItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListSetPriceListItems'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \GeminiCommerce\Pricelist\Model\PricelistSetPriceListItemsResponse|\GeminiCommerce\Pricelist\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function priceListSetPriceListItemsWithHttpInfo($body, string $contentType = self::contentTypes['priceListSetPriceListItems'][0])
    {
        $request = $this->priceListSetPriceListItemsRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\GeminiCommerce\Pricelist\Model\PricelistSetPriceListItemsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\PricelistSetPriceListItemsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\PricelistSetPriceListItemsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\Pricelist\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\GeminiCommerce\Pricelist\Model\PricelistSetPriceListItemsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\PricelistSetPriceListItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation priceListSetPriceListItemsAsync
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistSetPriceListItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListSetPriceListItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListSetPriceListItemsAsync($body, string $contentType = self::contentTypes['priceListSetPriceListItems'][0])
    {
        return $this->priceListSetPriceListItemsAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation priceListSetPriceListItemsAsyncWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistSetPriceListItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListSetPriceListItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListSetPriceListItemsAsyncWithHttpInfo($body, string $contentType = self::contentTypes['priceListSetPriceListItems'][0])
    {
        $returnType = '\GeminiCommerce\Pricelist\Model\PricelistSetPriceListItemsResponse';
        $request = $this->priceListSetPriceListItemsRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'priceListSetPriceListItems'
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistSetPriceListItemsRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListSetPriceListItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function priceListSetPriceListItemsRequest($body, string $contentType = self::contentTypes['priceListSetPriceListItems'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling priceListSetPriceListItems'
            );
        }


        $resourcePath = '/pricelist.PriceList/SetPriceListItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation priceListUpdatePriceList
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistUpdatePriceListRequest $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListUpdatePriceList'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\GeminiCommerce\Pricelist\Model\RpcStatus
     */
    public function priceListUpdatePriceList($body, string $contentType = self::contentTypes['priceListUpdatePriceList'][0])
    {
        list($response) = $this->priceListUpdatePriceListWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation priceListUpdatePriceListWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistUpdatePriceListRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListUpdatePriceList'] to see the possible values for this operation
     *
     * @throws \GeminiCommerce\Pricelist\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\GeminiCommerce\Pricelist\Model\RpcStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function priceListUpdatePriceListWithHttpInfo($body, string $contentType = self::contentTypes['priceListUpdatePriceList'][0])
    {
        $request = $this->priceListUpdatePriceListRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\GeminiCommerce\Pricelist\Model\RpcStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\GeminiCommerce\Pricelist\Model\RpcStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\GeminiCommerce\Pricelist\Model\RpcStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\GeminiCommerce\Pricelist\Model\RpcStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation priceListUpdatePriceListAsync
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistUpdatePriceListRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListUpdatePriceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListUpdatePriceListAsync($body, string $contentType = self::contentTypes['priceListUpdatePriceList'][0])
    {
        return $this->priceListUpdatePriceListAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation priceListUpdatePriceListAsyncWithHttpInfo
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistUpdatePriceListRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListUpdatePriceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function priceListUpdatePriceListAsyncWithHttpInfo($body, string $contentType = self::contentTypes['priceListUpdatePriceList'][0])
    {
        $returnType = 'object';
        $request = $this->priceListUpdatePriceListRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'priceListUpdatePriceList'
     *
     * @param  \GeminiCommerce\Pricelist\Model\PricelistUpdatePriceListRequest $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['priceListUpdatePriceList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function priceListUpdatePriceListRequest($body, string $contentType = self::contentTypes['priceListUpdatePriceList'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling priceListUpdatePriceList'
            );
        }


        $resourcePath = '/pricelist.PriceList/UpdatePriceList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
